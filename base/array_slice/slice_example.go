package main

import "fmt"

// s1 从 slice 索引2（闭区间）到索引5（开区间，元素真正取到索引4），长度为3，容量默认到数组结尾，为8。
//  s2 从 s1 的索引2（闭区间）到索引6（开区间，元素真正取到索引5），容量到索引7（开区间，真正到索引6），为5。
func main() {
	slice := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
	s1 := slice[2:5] //  2, 3, 4，  ， ， ，  ，  ， len=3 cap=8  默认到数组结尾，所以为8
	s2 := s1[2:6:7]  //        4, 5, 6, 7 最后一个表示容量到索引，那么真正到索引6 cap 为5

	s2 = append(s2, 100) // 4，5，6，7，100  填满了容器cap=5
	s2 = append(s2, 200) // cap 为5 触发扩容，长度为之前的两倍cap=10，底层指向新数组  4，5，6，7，100，200

	s1[2] = 20 //2,3,20

	fmt.Println(s1) // 只会打印s1长度以内的元素，但是底层元素不止是3个 [2,3,20]
	//fmt.Println(s1[6])
	// 但是因为len() 不能达到那个长度，所以就算index=6 里面存在值，如果直接获取,还是获取不到的
	fmt.Println(s2)    // [4,5,6,7,100,200]
	fmt.Println(slice) // [0,1,2,3,20,5,6,7,100,9]
}
